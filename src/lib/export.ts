import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { saveAs } from 'file-saver';

export interface ReportData {
  title: string;
  subtitle?: string;
  generatedAt: string;
  data: any;
  type: 'project' | 'okr' | 'grant' | 'executive' | 'custom';
}

export interface PDFOptions {
  orientation?: 'portrait' | 'landscape';
  format?: 'a4' | 'letter' | 'legal';
  margin?: number;
  fontSize?: number;
}

class ExportService {
  private defaultOptions: PDFOptions = {
    orientation: 'portrait',
    format: 'a4',
    margin: 20,
    fontSize: 12,
  };

  // Generate PDF from HTML element
  async generatePDFFromElement(
    element: HTMLElement,
    filename: string,
    options: PDFOptions = {}
  ): Promise<void> {
    try {
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF(options.orientation || 'portrait', 'mm', options.format || 'a4');
      
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 295; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(filename);
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Failed to generate PDF');
    }
  }

  // Generate project report PDF
  async generateProjectReport(projectData: any, filename?: string): Promise<void> {
    const pdf = new jsPDF('portrait', 'mm', 'a4');
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('SGE Project Report', margin, yPosition);
    yPosition += 15;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 20;

    // Project Details
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Project Details', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Name: ${projectData.name || 'N/A'}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`Status: ${projectData.status || 'N/A'}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`Progress: ${projectData.progress || 0}%`, margin, yPosition);
    yPosition += 8;
    pdf.text(`Participants: ${projectData.participants || 0}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`Funding: $${projectData.funding || 0}`, margin, yPosition);
    yPosition += 15;

    // Progress Bar
    if (projectData.progress) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Progress Overview', margin, yPosition);
      yPosition += 10;

      const progressWidth = 150;
      const progressHeight = 8;
      const progressFill = (projectData.progress / 100) * progressWidth;

      // Background
      pdf.setFillColor(200, 200, 200);
      pdf.rect(margin, yPosition, progressWidth, progressHeight, 'F');
      
      // Progress fill
      pdf.setFillColor(59, 130, 246); // Blue
      pdf.rect(margin, yPosition, progressFill, progressHeight, 'F');
      
      yPosition += 15;
    }

    // Key Metrics
    if (projectData.metrics) {
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Metrics', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      Object.entries(projectData.metrics).forEach(([key, value]) => {
        pdf.text(`${key}: ${value}`, margin, yPosition);
        yPosition += 8;
      });
    }

    // Footer
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by SGE Dashboard', margin, pageHeight - 10);

    pdf.save(filename || `project-report-${Date.now()}.pdf`);
  }

  // Generate OKR report PDF
  async generateOKRReport(okrData: any[], filename?: string): Promise<void> {
    const pdf = new jsPDF('portrait', 'mm', 'a4');
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('SGE OKR Report', margin, yPosition);
    yPosition += 15;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 20;

    // OKR Summary
    const totalOKRs = okrData.length;
    const onTrack = okrData.filter(okr => okr.status === 'on-track').length;
    const atRisk = okrData.filter(okr => okr.status === 'at-risk').length;
    const completed = okrData.filter(okr => okr.status === 'completed').length;

    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('OKR Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Total OKRs: ${totalOKRs}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`On Track: ${onTrack}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`At Risk: ${atRisk}`, margin, yPosition);
    yPosition += 8;
    pdf.text(`Completed: ${completed}`, margin, yPosition);
    yPosition += 15;

    // Individual OKRs
    okrData.forEach((okr, index) => {
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = margin;
      }

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${index + 1}. ${okr.objective}`, margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Status: ${okr.status}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Progress: ${okr.progress || 0}%`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Priority: ${okr.priority}`, margin, yPosition);
      yPosition += 10;

      // Key Results
      if (okr.keyResults && okr.keyResults.length > 0) {
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Key Results:', margin, yPosition);
        yPosition += 8;

        okr.keyResults.forEach((kr: any) => {
          pdf.setFontSize(10);
          pdf.setFont('helvetica', 'normal');
          pdf.text(`• ${kr.description} (${kr.progress}%)`, margin + 5, yPosition);
          yPosition += 6;
        });
      }

      yPosition += 10;
    });

    // Footer
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by SGE Dashboard', margin, pageHeight - 10);

    pdf.save(filename || `okr-report-${Date.now()}.pdf`);
  }

  // Generate executive summary PDF
  async generateExecutiveSummary(data: any, filename?: string): Promise<void> {
    const pdf = new jsPDF('landscape', 'mm', 'a4');
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.text('SGE Executive Summary', margin, yPosition);
    yPosition += 20;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 15;

    // Key Metrics Grid
    const metrics = [
      { label: 'Total Projects', value: data.totalProjects || 0 },
      { label: 'Active Projects', value: data.activeProjects || 0 },
      { label: 'Total Participants', value: data.totalParticipants || 0 },
      { label: 'Total Funding', value: `$${data.totalFunding || 0}` },
      { label: 'Average Progress', value: `${data.averageProgress || 0}%` },
      { label: 'OKRs On Track', value: data.okrsOnTrack || 0 },
    ];

    const colWidth = 80;
    const rowHeight = 15;
    let col = 0;
    let row = 0;

    metrics.forEach((metric, index) => {
      const x = margin + (col * colWidth);
      const y = yPosition + (row * rowHeight);

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(metric.label, x, y);
      
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text(metric.value.toString(), x, y + 8);

      col++;
      if (col >= 3) {
        col = 0;
        row++;
      }
    });

    yPosition += (row + 1) * rowHeight + 20;

    // Recent Activity
    if (data.recentActivity) {
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Recent Activity', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      data.recentActivity.slice(0, 5).forEach((activity: any) => {
        pdf.text(`• ${activity.description}`, margin, yPosition);
        yPosition += 8;
      });
    }

    // Footer
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by SGE Dashboard', margin, pageHeight - 10);

    pdf.save(filename || `executive-summary-${Date.now()}.pdf`);
  }

  // Generate custom report
  async generateCustomReport(reportData: ReportData, filename?: string): Promise<void> {
    const pdf = new jsPDF('portrait', 'mm', 'a4');
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text(reportData.title, margin, yPosition);
    yPosition += 15;

    if (reportData.subtitle) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'normal');
      pdf.text(reportData.subtitle, margin, yPosition);
      yPosition += 10;
    }

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated: ${reportData.generatedAt}`, margin, yPosition);
    yPosition += 20;

    // Custom data rendering
    this.renderCustomData(pdf, reportData.data, margin, yPosition);

    // Footer
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by SGE Dashboard', margin, pageHeight - 10);

    pdf.save(filename || `custom-report-${Date.now()}.pdf`);
  }

  private renderCustomData(pdf: jsPDF, data: any, margin: number, startY: number): void {
    let yPosition = startY;

    if (typeof data === 'object' && data !== null) {
      Object.entries(data).forEach(([key, value]) => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = margin;
        }

        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text(key, margin, yPosition);
        yPosition += 8;

        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        
        if (typeof value === 'object') {
          pdf.text(JSON.stringify(value, null, 2), margin + 5, yPosition);
          yPosition += 15;
        } else {
          pdf.text((value || '').toString(), margin + 5, yPosition);
          yPosition += 10;
        }
      });
    } else {
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(data.toString(), margin, yPosition);
    }
  }
}

export const exportService = new ExportService();
