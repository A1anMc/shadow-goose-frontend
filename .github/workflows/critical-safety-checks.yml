name: Critical Safety Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  critical-checks:
    runs-on: ubuntu-latest
    name: Critical Safety Checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Python tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pipdeptree

      - name: Critical Python Dependency Check
        run: |
          echo "üîç CRITICAL: Checking Python dependencies..."

          # Check for the exact conflicts we just encountered
          if [ -f "requirements.txt" ]; then
            echo "Checking for known conflict patterns..."

            # Pattern 1: FastAPI + python-multipart conflict
            if grep -q "fastapi==0.111.0" requirements.txt && grep -q "python-multipart==0.0.6" requirements.txt; then
              echo "‚ùå CRITICAL: FastAPI 0.111.0 + python-multipart 0.0.6 conflict detected!"
              echo "This will cause deployment failure. Use FastAPI 0.78.0 and python-multipart>=0.0.7"
              exit 1
            fi

            # Pattern 2: FastAPI + Pydantic conflict
            if grep -q "fastapi==0.78.0" requirements.txt && grep -q "pydantic==2.7.4" requirements.txt; then
              echo "‚ùå CRITICAL: FastAPI 0.78.0 + Pydantic 2.7.4 conflict detected!"
              echo "This will cause deployment failure. Use Pydantic 1.10.17"
              exit 1
            fi

            # Pattern 3: Python 3.13 + Pydantic 1.10.13 conflict
            if [ -f "runtime.txt" ] && grep -q "python-3.13" runtime.txt && grep -q "pydantic==1.10.13" requirements.txt; then
              echo "‚ùå CRITICAL: Python 3.13 + Pydantic 1.10.13 compatibility issue detected!"
              echo "This will cause startup failure. Use Pydantic 1.10.17 or Python 3.11"
              exit 1
            fi

            # Run pip check
            if ! pip check; then
              echo "‚ùå CRITICAL: Python dependency conflicts detected!"
              echo "Run 'pip check' locally to see details"
              exit 1
            fi

            echo "‚úÖ Python dependencies are compatible"
          fi

      - name: Critical TypeScript Check
        run: |
          echo "üîç CRITICAL: Checking TypeScript..."

          if [ -f "package.json" ]; then
            npm ci

            # Check for the exact TypeScript error we just encountered
            if grep -r "setNewComment(undefined)" . --include="*.ts" --include="*.tsx"; then
              echo "‚ùå CRITICAL: TypeScript error detected!"
              echo "Found 'setNewComment(undefined)' which will cause build failure"
              echo "Use 'setNewComment(\"\")' instead"
              exit 1
            fi

            # Run TypeScript check
            if ! npm run type-check; then
              echo "‚ùå CRITICAL: TypeScript compilation errors detected!"
              echo "Fix TypeScript errors before deploying"
              exit 1
            fi

            echo "‚úÖ TypeScript checks passed"
          fi

      - name: Critical Security Check
        run: |
          echo "üîç CRITICAL: Security check..."

          # Python security
          if [ -f "requirements.txt" ]; then
            safety check || {
              echo "‚ö†Ô∏è Security vulnerabilities found in Python dependencies"
              echo "Review and update vulnerable packages"
            }
          fi

          # Node.js security
          if [ -f "package.json" ]; then
            npm audit --audit-level=high || {
              echo "‚ö†Ô∏è High severity vulnerabilities found in Node.js dependencies"
              echo "Run 'npm audit fix' to resolve"
            }
          fi

      - name: Critical Build Test
        run: |
          echo "üîç CRITICAL: Testing builds..."

          # Test Python build
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt

            # Test if main.py can be imported (catches missing logger issues)
            if [ -f "app/main.py" ]; then
              python -c "import app.main; print('‚úÖ Python app imports successfully')" || {
                echo "‚ùå CRITICAL: Python app cannot be imported!"
                echo "Check for missing imports or syntax errors"
                exit 1
              }
            fi
          fi

          # Test Node.js build
          if [ -f "package.json" ]; then
            npm run build || {
              echo "‚ùå CRITICAL: Node.js build failed!"
              echo "Fix build errors before deploying"
              exit 1
            }
          fi

      - name: Report Status
        if: always()
        run: |
          echo "üìä Critical Safety Check Summary"
          echo "================================"
          echo "‚úÖ All critical checks completed"
          echo ""
          echo "Checks performed:"
          echo "- Python dependency conflicts"
          echo "- TypeScript compilation errors"
          echo "- Security vulnerabilities"
          echo "- Build verification"
          echo ""
          echo "Status: ${{ job.status }}"

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const comment = status === 'success'
              ? 'üéâ **Critical safety checks passed!** Ready for deployment.'
              : 'üö® **Critical safety checks failed!** Please fix the issues above before merging.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
