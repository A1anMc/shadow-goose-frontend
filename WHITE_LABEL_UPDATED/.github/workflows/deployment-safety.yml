name: Deployment Safety Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Job 1: Dependency Safety Checks
  dependency-safety:
    runs-on: ubuntu-latest
    name: Dependency Safety
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pipdeptree pip-review

      - name: Check Python dependencies
        run: |
          echo "üîç Checking Python dependencies..."

          # Check for conflicts
          if ! pip check; then
            echo "‚ùå Python dependency conflicts detected!"
            echo "Running auto-fix..."
            bash WHITE_LABEL_UPDATED/scripts/auto-fix-dependencies.sh
          else
            echo "‚úÖ No Python dependency conflicts found"
          fi

          # Security check
          echo "üîí Running security check..."
          safety check || {
            echo "‚ö†Ô∏è Security vulnerabilities found"
            echo "Check the safety report above"
          }

          # Generate dependency tree
          echo "üìã Generating dependency tree..."
          pipdeptree --warn silence > dependency-tree.txt

      - name: Check Node.js dependencies
        run: |
          echo "üîç Checking Node.js dependencies..."

          # Install dependencies
          npm ci

          # Check for vulnerabilities
          npm audit || {
            echo "‚ö†Ô∏è Node.js vulnerabilities found"
            echo "Attempting to fix..."
            npm audit fix || true
          }

          # Type check
          npm run type-check || {
            echo "‚ùå TypeScript errors detected!"
            echo "Running auto-fix..."
            node WHITE_LABEL_UPDATED/scripts/auto-fix-typescript.js
          }

          # Lint check
          npm run lint || {
            echo "‚ö†Ô∏è Linting issues found"
            echo "Attempting to fix..."
            npm run lint -- --fix || true
          }

      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports-${{ github.run_number }}
          path: |
            dependency-tree.txt
            dependency-fix-report.txt
          retention-days: 30

  # Job 2: Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-cov flake8 black mypy
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      - name: Install Node.js dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi

      - name: Python code quality checks
        run: |
          echo "üîç Running Python code quality checks..."

          # Format check
          black --check . || {
            echo "‚ö†Ô∏è Code formatting issues found"
            echo "Run 'black .' to fix"
          }

          # Lint check
          flake8 --max-line-length=100 --extend-ignore=E203,W503 . || {
            echo "‚ö†Ô∏è Linting issues found"
          }

          # Type check
          mypy . --ignore-missing-imports || {
            echo "‚ö†Ô∏è Type checking issues found"
          }

      - name: Node.js code quality checks
        run: |
          if [ -f "package.json" ]; then
            echo "üîç Running Node.js code quality checks..."

            # Type check
            npm run type-check || {
              echo "‚ùå TypeScript errors found"
              exit 1
            }

            # Lint check
            npm run lint || {
              echo "‚ö†Ô∏è Linting issues found"
            }

            # Build check
            npm run build || {
              echo "‚ùå Build failed"
              exit 1
            }
          fi

      - name: Run tests
        run: |
          echo "üß™ Running tests..."

          # Python tests
          if command -v pytest >/dev/null 2>&1; then
            pytest --cov=. --cov-report=xml --cov-report=term-missing || {
              echo "‚ùå Python tests failed"
              exit 1
            }
          fi

          # Node.js tests
          if [ -f "package.json" ] && npm run test >/dev/null 2>&1; then
            npm test || {
              echo "‚ùå Node.js tests failed"
              exit 1
            }
          fi

  # Job 3: Build Verification
  build-verification:
    runs-on: ubuntu-latest
    name: Build Verification
    needs: [dependency-safety, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Verify Python build
        run: |
          echo "üî® Verifying Python build..."

          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt

            # Check if main.py can be imported
            if [ -f "app/main.py" ]; then
              python -c "import app.main; print('‚úÖ Python app imports successfully')"
            fi
          fi

      - name: Verify Node.js build
        run: |
          if [ -f "package.json" ]; then
            echo "üî® Verifying Node.js build..."

            npm ci
            npm run build

            # Check if build output exists
            if [ -d ".next" ] || [ -d "dist" ] || [ -d "build" ]; then
              echo "‚úÖ Node.js build successful"
            else
              echo "‚ùå Node.js build failed - no output directory found"
              exit 1
            fi
          fi

  # Job 4: Environment Compatibility
  environment-compatibility:
    runs-on: ubuntu-latest
    name: Environment Compatibility
    needs: [build-verification]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check runtime specifications
        run: |
          echo "üîç Checking runtime compatibility..."

          # Check Python runtime
          if [ -f "runtime.txt" ]; then
            echo "Python runtime: $(cat runtime.txt)"

            # Validate runtime format
            if ! grep -q "^python-[0-9]\+\.[0-9]\+" runtime.txt; then
              echo "‚ùå Invalid Python runtime format in runtime.txt"
              exit 1
            fi
          fi

          # Check Node.js engines
          if [ -f "package.json" ]; then
            if grep -q '"engines"' package.json; then
              echo "Node.js engines specified in package.json"
            else
              echo "‚ö†Ô∏è No Node.js engines specified in package.json"
            fi
          fi

      - name: Check environment variables
        run: |
          echo "üîç Checking environment configuration..."

          # Check for required environment files
          if [ -f ".env.example" ]; then
            echo "‚úÖ .env.example found"
          else
            echo "‚ö†Ô∏è No .env.example found"
          fi

          # Check for deployment configuration
          if [ -f "render.yaml" ] || [ -f "docker-compose.yml" ] || [ -f "Dockerfile" ]; then
            echo "‚úÖ Deployment configuration found"
          else
            echo "‚ö†Ô∏è No deployment configuration found"
          fi

  # Job 5: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [environment-compatibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Python security scan
        run: |
          echo "üîí Running Python security scan..."

          pip install safety bandit

          # Safety check
          safety check --json > security-report.json || {
            echo "‚ö†Ô∏è Security vulnerabilities found"
            cat security-report.json
          }

          # Bandit security check
          bandit -r . -f json -o bandit-report.json || {
            echo "‚ö†Ô∏è Bandit security issues found"
          }

      - name: Node.js security scan
        run: |
          if [ -f "package.json" ]; then
            echo "üîí Running Node.js security scan..."

            npm ci
            npm audit --audit-level=moderate || {
              echo "‚ö†Ô∏è Node.js security vulnerabilities found"
            }
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            security-report.json
            bandit-report.json
          retention-days: 30

  # Job 6: Final Summary
  summary:
    runs-on: ubuntu-latest
    name: Summary
    needs: [dependency-safety, code-quality, build-verification, environment-compatibility, security-scan]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "üìä Deployment Safety Check Summary"
          echo "=================================="
          echo ""
          echo "‚úÖ All safety checks completed"
          echo ""
          echo "Checks performed:"
          echo "- Dependency conflicts"
          echo "- Code quality"
          echo "- Build verification"
          echo "- Environment compatibility"
          echo "- Security scan"
          echo ""
          echo "Status: ${{ needs.dependency-safety.result }}"
          echo "Status: ${{ needs.code-quality.result }}"
          echo "Status: ${{ needs.build-verification.result }}"
          echo "Status: ${{ needs.environment-compatibility.result }}"
          echo "Status: ${{ needs.security-scan.result }}"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            let comment = '## üõ°Ô∏è Deployment Safety Check Results\n\n';

            const jobResults = [
              { name: 'Dependency Safety', result: jobs.dependency-safety.result },
              { name: 'Code Quality', result: jobs.code-quality.result },
              { name: 'Build Verification', result: jobs.build-verification.result },
              { name: 'Environment Compatibility', result: jobs.environment-compatibility.result },
              { name: 'Security Scan', result: jobs.security-scan.result }
            ];

            jobResults.forEach(job => {
              const status = job.result === 'success' ? '‚úÖ' : job.result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              comment += `${status} **${job.name}**: ${job.result || 'skipped'}\n`;
            });

            comment += '\nüìã **Reports Available:**\n';
            comment += '- Dependency reports\n';
            comment += '- Security reports\n';
            comment += '- Build logs\n';

            if (jobResults.some(job => job.result === 'failure')) {
              comment += '\nüö® **Issues Found:**\n';
              comment += 'Please review the failed checks above and fix any issues before merging.\n';
            } else {
              comment += '\nüéâ **All checks passed!** Ready for deployment.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
